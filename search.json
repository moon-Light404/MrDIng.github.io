[{"title":"Hello World","url":"/2021/05/19/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","categories":["记录"]},{"title":"大整数类","url":"/2021/05/20/%E5%A4%A7%E6%95%B4%E6%95%B0%E7%B1%BB/","content":"<h2 id=\"大整数模拟四则运算\"><a href=\"#大整数模拟四则运算\" class=\"headerlink\" title=\"大整数模拟四则运算\"></a>大整数模拟四则运算</h2><p>用结构体模拟大整数(很长很多位的数字)四则运算<span id=\"more\"></span></p>\n<h3 id=\"数组存储\"><a href=\"#数组存储\" class=\"headerlink\" title=\"数组存储\"></a>数组存储</h3><table><tr><td bgcolor=\"#54FF9F\">整数高位存储在数组高位，整数的低位存储在数组的低位</td></tr></table>\n\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bign</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len; <span class=\"comment\">// 记录长度</span></span><br><span class=\"line\">    <span class=\"built_in\">bign</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span> d);</span><br><span class=\"line\">        len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>输入大整数时，都是字符串读入，再把字符串另存至 <code>bign 结构体</code>，倒序存储</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">bign <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">char</span> str[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    bign a;</span><br><span class=\"line\">    a.len = <span class=\"built_in\">strlen</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.len;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a.d[i] = str[len-i<span class=\"number\">-1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"比较整数大小\"><a href=\"#比较整数大小\" class=\"headerlink\" title=\" 比较整数大小\"></a><mark> 比较整数大小</mark></h3><ul>\n<li>比较长度</li>\n<li>如果长度相等，则从高位至低位依次比较，直到出现某一位不等，就可以找出大小。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(bign a,bign b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.len &gt; b.len)\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// a大</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.len &lt; b.len) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = a.len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a.d[i] &gt; b.d[i])\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.d[i] &lt; b.d[i])\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// 相等</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"大整数四则运算\"><a href=\"#大整数四则运算\" class=\"headerlink\" title=\"大整数四则运算\"></a>大整数四则运算</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">bign <span class=\"title\">add</span><span class=\"params\">(bign a,bign b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    bign c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>; <span class=\"comment\">// 进位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.len || i &lt; b.len;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = a.d[i] + b.d[i] + carry;</span><br><span class=\"line\">        c.d[c.len++] = tmp % <span class=\"number\">10</span>;</span><br><span class=\"line\">        carry = tmp / <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(carry != <span class=\"number\">0</span>) <span class=\"comment\">// 最后还剩了进位直接赋给高位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.d[c.len++] = carry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><mark>总代码加法</mark></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大整数高精度算法c++写法</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bign</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d[<span class=\"number\">1000</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len;</span><br><span class=\"line\">\t<span class=\"built_in\">bign</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> d);</span><br><span class=\"line\">\t\tlen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">bign <span class=\"title\">change</span><span class=\"params\">(string str)</span> </span>&#123;</span><br><span class=\"line\">\tbign a;</span><br><span class=\"line\">\ta.len = str.<span class=\"built_in\">length</span>(); <span class=\"comment\">// 数字长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.len; i++) &#123;</span><br><span class=\"line\">\t\ta.d[i] = str[a.len - i - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">bign <span class=\"title\">add</span><span class=\"params\">(bign a, bign b)</span> </span>&#123;</span><br><span class=\"line\">\tbign c;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>; <span class=\"comment\">// 进位</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.len || i &lt; b.len; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tmp = a.d[i] + b.d[i] + carry;</span><br><span class=\"line\">\t\tc.d[c.len++] = tmp % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tcarry = tmp / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (carry != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tc.d[c.len++] = carry;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstring s1, s2;</span><br><span class=\"line\">\tcin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class=\"line\">\tbign a = <span class=\"built_in\">change</span>(s1);</span><br><span class=\"line\">\tbign b = <span class=\"built_in\">change</span>(s2);</span><br><span class=\"line\">\tbign res = <span class=\"built_in\">add</span>(a, b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;结果是&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = res.len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcout &lt;&lt; res.d[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"高精度减法-大数减去小数\"><a href=\"#高精度减法-大数减去小数\" class=\"headerlink\" title=\"高精度减法(大数减去小数)\"></a>高精度减法(大数减去小数)</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">bign <span class=\"title\">sub</span><span class=\"params\">(bign a,bign b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    bign c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; a.len || i &lt; b.len;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.d[i] &lt; b.d[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a.d[i+<span class=\"number\">1</span>] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            a.d[i] += <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c.d[c.len++] = a.d[i] - b.d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c.len - <span class=\"number\">1</span> &gt;= <span class=\"number\">1</span> &amp;&amp; c.d[c.len<span class=\"number\">-1</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.len--; <span class=\"comment\">// 去掉前面的0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"高精度乘法\"><a href=\"#高精度乘法\" class=\"headerlink\" title=\"高精度乘法\"></a>高精度乘法</h3><p>​     1   4  7</p>\n<p>x        3   5</p>\n<p>​    2    4   5</p>\n<p>1  4    0</p>\n<p>3   5</p>\n<p>把147看作bign类型，35看作 int 类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">bign <span class=\"title\">multi</span><span class=\"params\">(bign a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    bign c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; a.len;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = a.d[i] * b + carry;</span><br><span class=\"line\">        c.d[c.len++] = t % <span class=\"number\">10</span>; <span class=\"comment\">// 个位作为该位结果</span></span><br><span class=\"line\">        carry = t / <span class=\"number\">10</span>; <span class=\"comment\">// 高位部分作为新的进位 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(carry != <span class=\"number\">0</span>) <span class=\"comment\">// 乘法可能不止一位进位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.d[c.len++] =  carry % <span class=\"number\">10</span>;</span><br><span class=\"line\">        carry /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["学习"],"tags":["算法","模拟"]},{"title":"背包总结","url":"/2021/05/20/%E8%83%8C%E5%8C%85%E6%80%BB%E7%BB%93/","content":"<h1 id=\"背包问题汇总\"><a href=\"#背包问题汇总\" class=\"headerlink\" title=\"背包问题汇总\"></a>背包问题汇总</h1><h3 id=\"01背包问题-easy\"><a href=\"#01背包问题-easy\" class=\"headerlink\" title=\"01背包问题(easy)\"></a>01背包问题(easy)</h3><p>有 N 件物品和一个容量是 V 的背包。==每件物品只能使用一次==。</p>\n<p>第 i 件物品的体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p>\n<p>输入格式</p>\n<p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p>\n<p>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 ii 件物品的体积和价值。</p>\n<p>输出格式</p>\n<p>输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>0&lt;N,V≤10000&lt;N,V≤1000<br>0&lt;vi, wi ≤10000&lt;vi, wi≤1000</p>\n<p>输入样例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">4 5</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 4</span><br><span class=\"line\">3 4</span><br><span class=\"line\">4 5</span><br></pre></td></tr></table></figure>\n\n<p>输出样例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n\n<p> 用集合和状态DP分析:</p>\n<blockquote>\n<p><img src=\"/2021/05/20/%E8%83%8C%E5%8C%85%E6%80%BB%E7%BB%93/c3qXWV.md.png\" alt=\"c3qXWV.png\" border=\"0\"></p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N]; <span class=\"comment\">// 体积和价值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N][N]; <span class=\"comment\">// f[i][j], j体积下前i个物品的最大价值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m; <span class=\"comment\">// n件物品和背包容量m</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\tcin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123; <span class=\"comment\">// 此背包有选与不选两种情况</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; v[i]) &#123; <span class=\"comment\">// 如果背包容量比这件物品的体积还小</span></span><br><span class=\"line\">\t\t\t\tf[i][j] = f[i - <span class=\"number\">1</span>][j]; <span class=\"comment\">// 那么此时这个物品就不用管</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\tcout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; j &lt;&lt; &#x27; &#x27; &lt;&lt; f[i][j] &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tf[i][j] = <span class=\"built_in\">max</span>(f[i - <span class=\"number\">1</span>][j - v[i]] + w[i], f[i - <span class=\"number\">1</span>][j]); <span class=\"comment\">// 状态转移方程,有两种情况取或者不取</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tcout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; j &lt;&lt; &#x27; &#x27; &lt;&lt; f[i][j] &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// f[i][j] 表示 体积为j下前i个物品的价值最大值</span></span><br><span class=\"line\">\tcout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// f[i-1][j] 可以看作是上一次循环计算的结果，因为只用到了一次，可以直接变为一维数组优化空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 优化版本</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)</span><br><span class=\"line\">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m; j &gt;= v[i];j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                f[j] = <span class=\"built_in\">max</span>(f[j - v[i]] + w[i],f[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout &lt;&lt; f[m]&lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>==优化分析==<br>看上面的输出数据, 我们会发现其实二维表里有很多重复的. 这是因为, 从递归式的特点来看, 我们只是基于第i-1层对第i层做了更新, 而第i-1层该是什么样还是什么样.</p>\n<p>换言之, 我们只需要知道最后一层的情况, 而不需要存储之前的结果.</p>\n<p>看上面的表格, 其实我们最后输出的是最右下角的值.</p>\n<p>我们这个时候可以得到一个递归式</p>\n<p> f[v]=max{f[v], f[v-vi]+wi}</p>\n<p>理解起来, 是和上面讲的一样的.<br>但是, 在具体的实现层面上, 有一个很反直觉的点:</p>\n<p>不同于二维dp的双重循环, 空间优化版本的内层循环必须是逆序的.</p>\n<p>如果这一点理解了, 整个程序的实现就非常容易了.</p>\n<p>==为什么优化要逆序==</p>\n<p>因为我们采用的是一维数组，每次都是更新此数组的每个数，我们要取得是最后一个数，因为 <code>f[j]</code> 要看数组前面的下标 <code>j-v[i]</code>，假设我们体积 j 从0开始遍历，设此时遍历到10，数组前面的数都已经在这一层更新过了，那就会出现错误了，应该让后面的下标最先遍历，后面下标遍历了一遍就用不到了。</p>\n<hr>\n<h3 id=\"完全背包问题\"><a href=\"#完全背包问题\" class=\"headerlink\" title=\"完全背包问题\"></a>完全背包问题</h3><p>有 N 种物品和一个容量是 V 的背包，每种物品都有==无限件==可用。</p>\n<p>第 i 种物品的体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p>\n<p>输入格式</p>\n<p>第一行两个整数，N，VN，V，用空格隔开，分别表示物品种数和背包容积。</p>\n<p>接下来有 N 行，每行两个整数 vi,wivi,wi，用空格隔开，分别表示第 i种物品的体积和价值。</p>\n<p>输出格式</p>\n<p>输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>0&lt;N,V≤10000&lt;N,V≤1000<br>0&lt;vi,wi≤10000&lt;vi,wi≤1000</p>\n<p>输入样例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">4 5</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 4</span><br><span class=\"line\">3 4</span><br><span class=\"line\">4 5</span><br></pre></td></tr></table></figure>\n\n<p>输出样例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/05/20/%E8%83%8C%E5%8C%85%E6%80%BB%E7%BB%93/c3q7Zj.png\" alt=\"c3q7Zj.png\" border=\"0\"></p>\n<p>简单写法:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N][N]; <span class=\"comment\">// f[i][j]表示从前i个物品中选且 V &lt;= j 最大价值，每件物品可重复选取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m; <span class=\"comment\">// 物品总数和背包容积</span></span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)  cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[i][j] = f[i - <span class=\"number\">1</span>][j]; <span class=\"comment\">// 第i件物品一件也不取</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j &gt;= v[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[i][j] = <span class=\"built_in\">max</span>(f[i<span class=\"number\">-1</span>][j], f[i][j - v[i]] + w[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout &lt;&lt; f[n][m];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://www.acwing.com/video/945/\">代码优化</a>变为==一维数组==</p>\n<p>优化写法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N]; <span class=\"comment\">// f[i][j]表示从前i个物品中选且 V &lt;= j 最大价值，每件物品可重复选取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m; <span class=\"comment\">// 物品总数和背包容积</span></span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)  cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m; j &gt;= v[i];j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                f[j] = <span class=\"built_in\">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout &lt;&lt; f[m];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"多重背包问题-数量固定\"><a href=\"#多重背包问题-数量固定\" class=\"headerlink\" title=\"多重背包问题(数量固定)\"></a>多重背包问题(数量固定)</h3><p>有 N 种物品和一个容量是 V 的背包。</p>\n<p>第 i 种物品==最多有 s 件==，每件体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p>\n<p>输入格式</p>\n<p>第一行两个整数，N，VN，V，用空格隔开，分别表示物品种数和背包容积。</p>\n<p>接下来有 NN 行，每行三个整数 vi,wi,sivi,wi,si，用空格隔开，分别表示第 ii 种物品的体积、价值和数量。</p>\n<p>输出格式</p>\n<p>输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>0&lt;N,V≤1000&lt;N,V≤100<br>0&lt;vi,wi,si≤1000&lt;vi,wi,si≤100</p>\n<p>输入样例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">4</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>输出样例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>本题是01背包问题的一个演化，01背包问题中一个背包只有选与不选两种情况，在多重背包问题中每个背包(有s个背包)<code>s+1</code>种选取方法,只要再加1个循环循环取得数量即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N], s[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N]; <span class=\"comment\">// f[i]表示体积为i的背包可以获得的最大价值 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m; <span class=\"comment\">// 物品总数和背包容积</span></span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)  cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m; j &gt;= v[i];j--) <span class=\"comment\">// 从m开始</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= s[i] &amp;&amp;  k * v[i] &lt;= j;k++)</span><br><span class=\"line\">                f[j] = <span class=\"built_in\">max</span>(f[j], f[j - k * v[i]] + k *  w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout &lt;&lt; f[m];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标准朴素写法\"><a href=\"#标准朴素写法\" class=\"headerlink\" title=\"标准朴素写法\"></a>标准朴素写法</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N], s[N]; </span><br><span class=\"line\"> <span class=\"comment\">// f[i][j] 表示前i件物品总重量(且总重量 &lt;= j)的最大价格</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N][N]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= s[i]; k ++)&#123; <span class=\"comment\">// 遍历物品的数量</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j &gt;=  k * v[i])&#123;</span><br><span class=\"line\">                    f[i][j] = <span class=\"built_in\">max</span>(f[i][j], f[i - <span class=\"number\">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class=\"line\">                    <span class=\"comment\">// max 里面也包含了f[i - 1][j]，所以前面可以省</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["学习"],"tags":["算法","动态规划"]}]