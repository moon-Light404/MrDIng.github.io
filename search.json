[{"title":"Hello World","url":"/2021/05/19/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","categories":["记录"]},{"title":"javaBean简记","url":"/2021/05/20/javaBean%E7%AE%80%E8%AE%B0/","content":"<hr>\n<h2 id=\"JavaBean的使用\"><a href=\"#JavaBean的使用\" class=\"headerlink\" title=\"JavaBean的使用\"></a>JavaBean的使用</h2><p>JavaBean 是<mark>特殊的 Java 类</mark>，使用 Java 语言书写，并且遵守 JavaBean API 规范。</p>\n<p>接下来给出的是 JavaBean 与其它 Java 类相比而言独一无二的特征：</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>提供一个默认的无参构造函数。</li>\n<li>需要被序列化并且实现了 Serializable 接口。</li>\n<li>可能有一系列可读写属性。</li>\n<li>可能有一系列的 getter 或 <strong>setter</strong> 方法。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.runoob;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentsBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String firstName = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String lastName = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentsBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstName</span><span class=\"params\">(String firstName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLastName</span><span class=\"params\">(String lastName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译后获得 <strong>StudentBean.class</strong> 文件，将其拷贝到 <strong>&lt;JSP 项目&gt;/WebContent/WEB-INF/classes/com/runoob</strong></p>\n<h2 id=\"访问javaBean\"><a href=\"#访问javaBean\" class=\"headerlink\" title=\"访问javaBean\"></a>访问javaBean</h2><figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;jsp:useBean id = <span class=\"string\">&quot;bean的名字&quot;</span> scope=<span class=\"string\">&quot;bean的作用域&quot;</span> typeSpec/&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;jsp:useBean id = <span class=\"string\">&quot;date&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>= <span class=\"string\">&quot;java.util.Date&quot;</span>/&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    日期为: &lt;%= date%&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;%--可以把date看成一个Date类型的变量,<span class=\"class\"><span class=\"keyword\">class</span>表示类型--%&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"对象的属性\"><a href=\"#对象的属性\" class=\"headerlink\" title=\"对象的属性\"></a>对象的属性</h3><figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;jsp:useBean id = <span class=\"string\">&quot;id&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>= <span class=\"string\">&quot;bean 编译的类&quot;</span> scope = <span class=\"string\">&quot;bean作用域&quot;</span>&gt;</span><br><span class=\"line\">    &lt;jsp:setProperty name = <span class=\"string\">&quot;bean的id&quot;</span> property=<span class=\"string\">&quot;属性名&quot;</span></span><br><span class=\"line\">    \t\t\tvalue=<span class=\"string\">&quot;value&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;jsp:getProperty name = <span class=\"string\">&quot;bean的id&quot;</span> property=<span class=\"string\">&quot;属性名&quot;</span>/&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&lt;/jsp:useBean&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>把”bean的id”当作一个java对象，property表示该对象的某一个属性或变量,value可以设置或获取该变量的值</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;jsp:useBean id=<span class=\"string\">&quot;students&quot;</span> </span><br><span class=\"line\">                    <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;com.runoob.StudentsBean&quot;</span>&gt; </span><br><span class=\"line\">   &lt;jsp:setProperty name=<span class=\"string\">&quot;students&quot;</span> property=<span class=\"string\">&quot;firstName&quot;</span></span><br><span class=\"line\">                    value=<span class=\"string\">&quot;小强&quot;</span>/&gt;</span><br><span class=\"line\">   &lt;jsp:setProperty name=<span class=\"string\">&quot;students&quot;</span> property=<span class=\"string\">&quot;lastName&quot;</span> </span><br><span class=\"line\">                    value=<span class=\"string\">&quot;王&quot;</span>/&gt;</span><br><span class=\"line\">   &lt;jsp:setProperty name=<span class=\"string\">&quot;students&quot;</span> property=<span class=\"string\">&quot;age&quot;</span></span><br><span class=\"line\">                    value=<span class=\"string\">&quot;10&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/jsp:useBean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;学生名字: </span><br><span class=\"line\">   &lt;jsp:getProperty name=<span class=\"string\">&quot;students&quot;</span> property=<span class=\"string\">&quot;firstName&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;学生姓氏: </span><br><span class=\"line\">   &lt;jsp:getProperty name=<span class=\"string\">&quot;students&quot;</span> property=<span class=\"string\">&quot;lastName&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;学生年龄: </span><br><span class=\"line\">   &lt;jsp:getProperty name=<span class=\"string\">&quot;students&quot;</span> property=<span class=\"string\">&quot;age&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>&lt;jsp:useBean id=”beanName” class=”package.class”** **scope=”page|request|session|application”/&gt;</strong></p>\n<p>在<a href=\"jsp:useBean\">jsp:useBean</a>块中id表示的对象名是已经被实例化的，可以直接使用<mark>对象.方法名</mark>调用方法设置参数。在&lt;%%&gt;块中也可以实现和调用java代码。</p>\n","categories":["记录"],"tags":["网页"]},{"title":"图算法总结","url":"/2021/05/22/%E5%9B%BE%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/","content":"<h2 id=\"图算法-数组版\"><a href=\"#图算法-数组版\" class=\"headerlink\" title=\"图算法(数组版)\"></a>图算法(数组版)</h2><span id=\"more\"></span>\n\n<h3 id=\"1-1最短路径Dijkstra算法\"><a href=\"#1-1最短路径Dijkstra算法\" class=\"headerlink\" title=\"1.1最短路径Dijkstra算法:\"></a>1.1最短路径Dijkstra算法:</h3><ul>\n<li>假设顶点是$V_0到V_5$ 六个点，开始时候是没有连线的，但是已知能互相到达的顶点之间的边权。</li>\n<li>步骤是每次从顶点0开始查找，找出<mark>距离顶点最短的点</mark>，然后标记该点为true,再查询该点能直达的其他点加上边权会不会比原先记录的距离值小—&gt;即更新最短距离；遍历完了所有从该点能到的点后再次回到起点。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXV=<span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">1000000000</span>;<span class=\"comment\">//很大的数九位0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,s,G[MAXV][MAXV];<span class=\"comment\">//n为顶点数量，m为边数，s为起点</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[MAXV];<span class=\"comment\">//起点到各点的最短路径长度</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[MAXV]=&#123;<span class=\"literal\">false</span>&#125;; <span class=\"comment\">//标记访问数组 false为没有访问，true 为访问过</span></span><br><span class=\"line\"><span class=\"comment\">/*本题输入:</span></span><br><span class=\"line\"><span class=\"comment\">6 8 0 //6个顶点  8条边  起点为0号</span></span><br><span class=\"line\"><span class=\"comment\">0 1 1 从0点到1点距离为1</span></span><br><span class=\"line\"><span class=\"comment\">0 3 4</span></span><br><span class=\"line\"><span class=\"comment\">0 4 4</span></span><br><span class=\"line\"><span class=\"comment\">1 3 2</span></span><br><span class=\"line\"><span class=\"comment\">2 5 1</span></span><br><span class=\"line\"><span class=\"comment\">3 2 2</span></span><br><span class=\"line\"><span class=\"comment\">3 4 3</span></span><br><span class=\"line\"><span class=\"comment\">4 5 3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(d,d+MAXV,INF); </span><br><span class=\"line\">    d[s]=<span class=\"number\">0</span>; <span class=\"comment\">//初始化操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;<span class=\"comment\">//每次更新完都要回到起点,循环n次</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=<span class=\"number\">-1</span>,MIN=INF; <span class=\"comment\">//比较下面，u使得d[u]最小，MIN存放该最小的d[u]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[j]==<span class=\"literal\">false</span> &amp;&amp; d[j]&lt;MIN)&#123;</span><br><span class=\"line\">                u = j;</span><br><span class=\"line\">                MIN = d[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span>;<span class=\"comment\">//剩下的顶点和起点s不通</span></span><br><span class=\"line\">        vis[u]= <span class=\"literal\">true</span>;<span class=\"comment\">//找出距离起点最短的点 u</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v=<span class=\"number\">0</span>;v&lt;n;v++)&#123;<span class=\"comment\">//从 u 开始走，更新最短距离</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[v]==<span class=\"literal\">false</span> &amp;&amp; G[u][v]!=INF &amp;&amp; d[u]+G[u][v]&lt;d[v])&#123;<span class=\"comment\">//G[u][v]是从u到v顶点的直通距离</span></span><br><span class=\"line\">                d[v]=d[u]+G[u][v];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,w;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(G[<span class=\"number\">0</span>],G[<span class=\"number\">0</span>]+MAXV*MAXV,INF);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class=\"line\">        G[u][v]=w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Dijkstra</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;d[i];<span class=\"comment\">//输出结果最短路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2基本模板\"><a href=\"#1-2基本模板\" class=\"headerlink\" title=\"1.2基本模板\"></a>1.2基本模板</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(循环n次)&#123;</span><br><span class=\"line\">    u = 使得d[u]最小且还未被访问的顶点的标号;</span><br><span class=\"line\">    记u已被访问;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(从u出发能到达的所有顶点v)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v未被访问 &amp;&amp; 以u为中介点使s到顶点v 的最短距离d[v]更优)&#123;</span><br><span class=\"line\">            优化d[v];</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1图的存储\"><a href=\"#2-1图的存储\" class=\"headerlink\" title=\"2.1图的存储\"></a>2.1图的存储</h3><p><strong>树与图的存储</strong></p>\n<p>树是一种特殊的图，与图的存储方式相同。<br>对于无向图中的边ab，存储两条有向边a-&gt;b, b-&gt;a。<br>因此我们可以只考虑有向图的存储。</p>\n<p>(1) 邻接矩阵：<code>g[a][b]</code> 存储边<code>a-&gt;b</code></p>\n<p>(2) 邻接表：</p>\n<p>// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> h[N], e[N], ne[N], idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加一条边a-&gt;b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">idx = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(h, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> h);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2树与图的遍历\"><a href=\"#2-2树与图的遍历\" class=\"headerlink\" title=\"2.2树与图的遍历\"></a>2.2树与图的遍历</h3><p>时间复杂度<code>O(n+m)</code>,n表示点数，m表示边数</p>\n<p>(1)深度优先遍历</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = h[u];i!= - <span class=\"number\">1</span>;i = ne[i])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = e[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[j])\t<span class=\"built_in\">dfs</span>(j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>(2)宽度优先遍历</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">queue&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">st[<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">    q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = h[t];h!=<span class=\"number\">-1</span>;i = ne[i])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = e[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[j])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            st[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-朴素-dijkstra-算法\"><a href=\"#3-朴素-dijkstra-算法\" class=\"headerlink\" title=\"3.朴素$dijkstra$算法\"></a>3.朴素$dijkstra$算法</h3><p>时间复杂是 $O(n^2+m)$, n 表示点数，m 表示边数</p>\n<p>算法设计：<strong>贪心</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> g[N][N];  <span class=\"comment\">// 存储每条边</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[N];  <span class=\"comment\">// 存储1号点到每个点的最短距离</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> st[N];   <span class=\"comment\">// 存储每个点的最短路是否已经确定</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求1号点到n号点的最短路，如果不存在则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"number\">-1</span>;     <span class=\"comment\">// 在还未确定最短路的点中，寻找距离最小的点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++ )</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!st[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dist[t] &gt; dist[j]))</span><br><span class=\"line\">                t = j;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用t更新其他点的距离</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++ )</span><br><span class=\"line\">            dist[j] = <span class=\"built_in\">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">        st[t] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dist[n] == <span class=\"number\">0x3f3f3f3f</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Bellman-Ford-算法\"><a href=\"#4-Bellman-Ford-算法\" class=\"headerlink\" title=\"4.$Bellman-Ford$算法\"></a>4.$Bellman-Ford$算法</h3><p><strong>单源最短路径算法</strong></p>\n<p>对于带权有向图 G = (V, E)，Dijkstra 算法要求图 G 中边的权值均为<strong>非负</strong>，而 <a href=\"http://www.cnblogs.com/gaochundong/p/bellman_ford_algorithm.html\">Bellman-Ford 算法</a>能适应一般的情况（即<strong>存在负权边</strong>的情况）。一个实现的很好的 Dijkstra 算法比 Bellman-Ford 算法的运行时间要低。</p>\n<p>设计：<strong>动态规划</strong> </p>\n<p>时间复杂度：$O(V*E)$  顶点数 边数, $n顶点数，m边数$</p>\n<p>理解：对所有边进行$n-1$次松弛操作,<mark>因为在一个含有n个顶点的图中，任意两点之间的最短路径最多包含n-1条边</mark>，</p>\n<p>换句话说，第1轮在所有边进行松弛后，得到的是源点最多经过1条边到达其他顶点的最短距离；</p>\n<p>第2轮在对所有的边进行松弛后，得到的是源点最多经过2条边到达其他顶点的最短距离；</p>\n<p><strong>算法描述：</strong></p>\n<p>1、$dist[N]$数组表示源顶点到所有顶点的距离，初始化为$infinte$,$dist[1][1]=0$,</p>\n<p>2、计算最短路径，执行$V-1$次遍历</p>\n<p>对于图中的每条边：如果起点u的距离d加上权值w小于终点v的距离，更新终点v的距离值d</p>\n<p>$if(dist[b]&gt;dist[a]+w)    dist[b]=dist[a]+w$</p>\n<p>例如以下加上一个拷贝数组就可以求<mark>最多经过k条边的最短距离</mark></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m;       <span class=\"comment\">// n表示点数，m表示边数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[N];        <span class=\"comment\">// dist[x]存储1到x的最短路距离</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> backup[N]; <span class=\"comment\">// 拷贝数组,这样就保证轮数与边数一致</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>     // 边，<span class=\"title\">a</span>表示出点，<span class=\"title\">b</span>表示入点，<span class=\"title\">w</span>表示边的权重</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, w;</span><br><span class=\"line\">&#125;edges[M];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bellman_ford</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(backup,dist,<span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j ++ )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist[b] &gt; backup[a] + w)</span><br><span class=\"line\">                dist[b] = backup[a] + w;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dist[n] &gt; <span class=\"number\">0x3f3f3f3f</span> / <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>判断是否有负权环</strong>，再对边进行一次额外的遍历，如果还能更新说明仍然存在一条边使得两点距离更短，事实上再更新多次还是有更新的情况。</p>\n<h3 id=\"5、-SPFA-算法\"><a href=\"#5、-SPFA-算法\" class=\"headerlink\" title=\"5、$SPFA$算法\"></a>5、$SPFA$算法</h3><p>时间复杂度 平均情况下 $O(m)$，最坏情况下 $O(nm)$, n 表示点数，m 表示边数</p>\n<p>$SPFA算法$是对上面的$bellman_ford$算法的队列优化</p>\n<p>算法描述：首先建立一个队列，初始队列里只有起始点，**建立一个表格记录起始点到所有点的最短路径(初始值赋为极大值)**，然后进行松弛操作，<mark>依次用队列中的点去刷新起始点到所有点的最短路</mark>，如果刷新成功且被<mark>刷新点不在队列中</mark>则把其加入到队列中。</p>\n<p>求负环：如果某个点进入队列的次数超过N次则存在负环(N为图的顶点数)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n; <span class=\"comment\">// 总点数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> h[N],w[N],e[N],ne[N],idx; <span class=\"comment\">// 邻接表存储所有边</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> st[N];<span class=\"comment\">// 存储每个点是否在队列中</span></span><br><span class=\"line\"><span class=\"comment\">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    queue&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    st[<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 取出队列中的一个元素来更新距离</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> t = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        st[t] = <span class=\"literal\">false</span>; <span class=\"comment\">// 先弹出队列标记为false，因为后面可能还会有更新</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = h[t];i != <span class=\"number\">-1</span>;i = ne[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = e[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[j] &gt; dist[t]+w[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// 先更新最短距离 </span></span><br><span class=\"line\">                dist[j] = dist[t] + w[i];</span><br><span class=\"line\">                <span class=\"comment\">// 如果被更新的点不在队列中，就要加入，因为后面需要用到其最短值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!st[j])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    q.<span class=\"built_in\">pusj</span>(j);</span><br><span class=\"line\">                    st[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (dist[n] == <span class=\"number\">0x3f3f3f3f</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5、-Floyd-算法\"><a href=\"#5、-Floyd-算法\" class=\"headerlink\" title=\"5、$Floyd$算法\"></a>5、$Floyd$算法</h3><p>$Floyd$算法属于暴力求解，时间复杂度$O(n^3)$,$n$表示点数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j &lt;= n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            d[i][j] = (i == j ? <span class=\"number\">0</span> : INF);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 算法结束后，d[a][b]表示a到b的最短距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k ++ )</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++ )</span><br><span class=\"line\">                d[i][j] = <span class=\"built_in\">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["算法","图"]},{"title":"动态规划常见模型","url":"/2021/05/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B/","content":"<h2 id=\"LCS最长公共子序列\"><a href=\"#LCS最长公共子序列\" class=\"headerlink\" title=\"LCS最长公共子序列\"></a>LCS最长公共子序列</h2><span id=\"more\"></span>\n\n<p>最长公共子序列（longest common sequence）和最长公共子串（longest common substring）不是一回事儿。即一个给定的序列的==子序列==，就是将给定序列中==零个或多个元素去掉之后==得到的结果。什么是==子串==，给定串中任意个==连续==的字符组成的子序列称为该串的子串。</p>\n<p><strong>动态规划</strong></p>\n<p>设<code>Ax,Bx</code>表示 A  和 B的连续前 x 项构成的子序列，用<code>LCS(x,y)</code>表示它们的最长公共子序列长度，那原问题就是求<code>LCS(m,n)</code>。</p>\n<p>用$L(x,y)$表示Ax和Bx的一个最长公共子序列。</p>\n<ul>\n<li>求<code>LCS(x,y)</code>的方法</li>\n</ul>\n<p>(1) <code>Ax = By</code>那么A和B的最长公共子序列一定是这个元素</p>\n<p>有 <code>LCS(x,y) = LCs(x-1,y-1)</code> + 1</p>\n<p>(2)$Ax\\neq By$ </p>\n<p>如果 $t\\neq Ax$,则有$LCS(x,y)=LCS(x-1,y)$,因为与Ax 无关了</p>\n<p>如果$t\\neq By$，则$LCS(x,y)=LCS(x,y-1)$</p>\n<hr>\n<p>$LCS(x,y)=LCS(x-1,y-1)+1  (Ax=By)$</p>\n<p>$max(LCS(x-1,y),LCS(x,y-1)) (Ax\\neq By)$</p>\n<p>$0 如果 x=0 或者 y = 0$</p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N][N]; <span class=\"comment\">// f[i][j] 表示s1前i个字符和 s2前j个字符公共子序列的最大值</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> s1[N], s2[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\">    cin &gt;&gt; m &gt;&gt; n; <span class=\"comment\">// 字符串的长度</span></span><br><span class=\"line\">    cin &gt;&gt; s1+<span class=\"number\">1</span> &gt;&gt; s2+<span class=\"number\">1</span>;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = f[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s1[i] == s2[j])  f[i][j] = f[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[i][j] = <span class=\"built_in\">max</span>(f[i<span class=\"number\">-1</span>][j],f[i][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; f[m][n];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"L2-008-最长对称子串-（25-分\"><a href=\"#L2-008-最长对称子串-（25-分\" class=\"headerlink\" title=\"L2-008 最长对称子串 （25 分)\"></a>L2-008 最长对称子串 （25 分)</h2><p>对给定的字符串，本题要求你输出最长对称子串的长度。例如，给定Is PAT&amp;TAP symmetric?，最长对称子串为s PAT&amp;TAP s，于是你应该输出11。</p>\n<p>输入格式：<br>输入在一行中给出长度不超过1000的非空字符串。</p>\n<p>输出格式：<br>在一行中输出最长对称子串的长度。</p>\n<p>输入样例：<br><code>Is PAT&amp;TAP symmetric?</code></p>\n<p>输出样例：<br>11</p>\n<p>原文链接：<a href=\"https://blog.csdn.net/weixin_43264529/article/details/88812551\">https://blog.csdn.net/weixin_43264529/article/details/88812551</a></p>\n<p>==暴力DP==</p>\n<p>设<code>A[l][r]</code>为字符串 <code>str[l:r]</code>的最长对称子串</p>\n<p>对于第 l 位与第 r 位之间的字符串<code>str[l:r]</code>，如果其是对称子串的话，则满足<code>str[l] == str[r]</code>，且<code>str[l+1: r-1]</code>为对称子串</p>\n<p>==初始条件==</p>\n<p><code>A[i][j] == 1</code>   - &gt; <code>i == j</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;isotream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"built_in\">A</span>(n,vector&lt;<span class=\"keyword\">int</span>&gt;(n,<span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin,str);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = str.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">        A[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> Max = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">1</span>;len &lt; n;len++) <span class=\"comment\">// 枚举子串长度</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;l + len&lt; n;l++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> r = l + len;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str[l] == str[r])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(A[l+<span class=\"number\">1</span>][r<span class=\"number\">-1</span>] == r - l <span class=\"number\">-1</span>)<span class=\"comment\">// 如果该区间的最长对称子串等于总长度</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    A[l][r] = A[l+<span class=\"number\">1</span>][r<span class=\"number\">-1</span>] + <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(A[l][r] &gt; Max)</span><br><span class=\"line\">                        Max = A[l][r];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"最长连续和\"><a href=\"#最长连续和\" class=\"headerlink\" title=\"最长连续和\"></a>最长连续和</h2><p>题目描述：给出一个长度为n的序列<code>A1，A2，…，An</code>，求最大连续和。换句话说，要求找到<code>1&lt;=i&lt;=j&lt;=n</code>，使得<code>Ai+Ai+1+…Aj</code>尽量大。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], d[N]; <span class=\"comment\">// d[i]表示以a[i]结尾的子段中的最大连续和</span></span><br><span class=\"line\"><span class=\"comment\">// 因为它没有限制长度(任意长度都行)，无非就是判断会不会有负数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\tcin &gt;&gt; a[i];</span><br><span class=\"line\">\td[<span class=\"number\">1</span>] = a[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d[i - <span class=\"number\">1</span>] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\td[i] = d[i - <span class=\"number\">1</span>] + a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\td[i] = a[i]; <span class=\"comment\">// 前面的都是负数，直接丢弃</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; d[n];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h2><h3 id=\"letcode-279-完全平方数\"><a href=\"#letcode-279-完全平方数\" class=\"headerlink\" title=\"letcode 279.完全平方数\"></a>letcode 279.完全平方数</h3><p><a href=\"https://leetcode-cn.com/problems/perfect-squares/\">https://leetcode-cn.com/problems/perfect-squares/</a></p>\n<h4 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numSquares</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是用动态规划来做，dp[i]表示的是i需要的最小的平方数字，动态转移的过程是，要么这个数字是来自于i - j*j这个数的和 + 1，要么是来自于它自己，取最小值</span></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            dp[i] = i; <span class=\"comment\">//dp[i]减小的可能性是包含某个平方数</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= sqrt(i); j++)&#123;</span><br><span class=\"line\">                dp[i] = min(dp[i], dp[i - j*j] + <span class=\"number\">1</span>); <span class=\"comment\">//循环条件使得 i - j*j &gt;=0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/azBNfs\"><img src=\"/2021/05/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B/azBNfs.md.jpg\" alt=\"azBNfs.md.jpg\" border=\"0\"></a></p>\n<h4 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h4><p>遍历树的层数</p>\n<p><a href=\"https://imgchr.com/i/d9b0IS\"><img src=\"/2021/05/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B/d9b0IS.md.jpg\" alt=\"d9b0IS.md.jpg\" border=\"0\"></a></p>\n\n\n\n\n<p>把 n 看成根节点， n 减去第一个可能的完全平方数的集合就是根的子节点。当某个节点的子节点的值第一次为 0 时，说明这一层我们已经找到了数N 的组成方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numSquares</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 定义一个队列，定义一个visited的list集合  </span></span><br><span class=\"line\">        queue&lt;<span class=\"keyword\">int</span>&gt; total;</span><br><span class=\"line\">        set&lt;<span class=\"keyword\">int</span>&gt; visited;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> step = <span class=\"number\">0</span>;</span><br><span class=\"line\">        total.push(n);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!total.empty())&#123;</span><br><span class=\"line\">            step++;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l = total.size(); <span class=\"comment\">// 记录每一层数的个数</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里是把每一层的循环完毕，所以是这一层的长度循环</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> top = total.front();</span><br><span class=\"line\">                total.pop(); <span class=\"comment\">//记录第一个值，然后删掉，</span></span><br><span class=\"line\">                <span class=\"comment\">//下一次第一个就是以前的第二个数据</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= sqrt(top); j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> x = top - j*j;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> step;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(visited.find(x) == visited.end() &amp;&amp; x &gt; <span class=\"number\">0</span>)&#123; <span class=\"comment\">//如果 x 不在visited中，存入visited</span></span><br><span class=\"line\">                        total.push(x); <span class=\"comment\">//存入x，</span></span><br><span class=\"line\">                        visited.insert(x);<span class=\"comment\">//避免重复</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数塔问题-算法笔记p427\"><a href=\"#数塔问题-算法笔记p427\" class=\"headerlink\" title=\"数塔问题 (算法笔记p427)\"></a>数塔问题 (算法笔记p427)</h3><p>采用递归求法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">10</span>][<span class=\"number\">10</span>];<span class=\"comment\">//有10 层数字</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(a,<span class=\"number\">-1</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));<span class=\"comment\">//初始化dp数组为-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dp[i][j]!=<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==n)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[i][j];</span><br><span class=\"line\">    dp[i][j]=<span class=\"built_in\">max</span>(<span class=\"built_in\">F</span>(i+<span class=\"number\">1</span>,j),<span class=\"built_in\">F</span>(i+<span class=\"number\">1</span>,j+<span class=\"number\">1</span>))+f[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[i][j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;=i;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin&gt;&gt;f[i][j];<span class=\"comment\">//输入塔的数字</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"built_in\">F</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自底向上递推写法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">    dp[n][j] = f[n][j];<span class=\"comment\">//n表示层数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=i;j++)&#123;</span><br><span class=\"line\">        dp[i][j] = <span class=\"built_in\">max</span>(dp[i+<span class=\"number\">1</span>][j],dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]) + f[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["算法"],"tags":["动态规划"]},{"title":"排序算法","url":"/2021/05/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","content":"<h2 id=\"算法分类\"><a href=\"#算法分类\" class=\"headerlink\" title=\"算法分类\"></a>算法分类</h2><h3 id=\"1、排序\"><a href=\"#1、排序\" class=\"headerlink\" title=\"1、排序\"></a>1、排序</h3><ul>\n<li>比较类排序</li>\n</ul>\n<h3 id=\"2、复杂度\"><a href=\"#2、复杂度\" class=\"headerlink\" title=\"2、复杂度\"></a>2、复杂度</h3><p><mark>相关概念</mark></p>\n<ul>\n<li>稳定：如果 a 本来在 b 前面，而a = b ，排序之后 a 仍然在 b 的前面</li>\n<li>不稳定：如果 a 本来 在b的前面，而 a = b ，排序之后 a 可能在 b 的后面</li>\n<li>时间复杂度：对排序数据的<mark>总的操作数</mark>，反映当 n 变化时，操作次数呈什么变化</li>\n<li>空间复杂度： 指算法计算机内执行时所需<mark>存空间</mark>的度量，也是数据规模 n 的函数</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"几种常见排序-已学\"><a href=\"#几种常见排序-已学\" class=\"headerlink\" title=\"几种常见排序(已学)\"></a>几种常见排序(已学)</h3><h4 id=\"1、冒泡排序-Bubble-Sort\"><a href=\"#1、冒泡排序-Bubble-Sort\" class=\"headerlink\" title=\"1、冒泡排序(Bubble Sort)\"></a>1、<strong>冒泡排序(Bubble Sort)</strong></h4><p>~~注：重复地走访序列，一次比较两个元素，如果顺序错误就交换过来，重复地进行直到没有再需要交换，也就说该数列排序完成——-&gt;这个算法的名字是因为越小的元素会<mark>经由交换慢慢“浮”到顶端</mark></p>\n<p><u>动图展示</u></p>\n<img src=\"/2021/05/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/aoKJdf.gif\" alt=\"aoKJdf.gif\" border=\"0\">\n\n<p>代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">bubbleSort</span><span class=\"params\">(arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;  <span class=\"comment\">//每次循环最大的元素都被放到最后，就不用管了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;        <span class=\"comment\">// 相邻元素两两对比</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j+<span class=\"number\">1</span>];        <span class=\"comment\">// 元素交换</span></span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>课上讲的模板类写法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mySwap</span><span class=\"params\">(T &amp;x,T &amp;y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tT temp = x;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">\ty = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbldeSort</span><span class=\"params\">(T a[],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i= n<span class=\"number\">-1</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lastExchange = <span class=\"number\">0</span>;<span class=\"comment\">//每次都值为 0 ，如果下面的 if语句 不成立，退出循环，说明排序完成</span></span><br><span class=\"line\">        <span class=\"comment\">//(a[j]&lt;a[j+1])都成立</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(a[j+<span class=\"number\">1</span>]&lt;a[j])</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">mySwap</span>(a[j],a[j+<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t  lastExchange = j;  <span class=\"comment\">//第一次循环这个 j = n-1，a[j+1]包括后面的数就不用管了</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  i = lastExchange;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2、选择排序-Selection-Sort\"><a href=\"#2、选择排序-Selection-Sort\" class=\"headerlink\" title=\"2、选择排序(Selection Sort)\"></a>2、选择排序(Selection Sort)</h4><p>~~注：首先在未排序序列中找到最小(大)的元素，存放到<mark>排序序列的起始位置</mark>，然后再从剩余未排序序列元素中继续寻找最小元素，然后放到<mark>已排序序列的末尾</mark>。以此类推，直到排序完毕。</p>\n<p>动图</p>\n<p><img src=\"/2021/05/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/aoKYo8.gif\" alt=\"aoKYo8.gif\" border=\"0\">](<a href=\"https://imgchr.com/i/aItpqJ\">https://imgchr.com/i/aItpqJ</a>)</p>\n<p>代码实现;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">selectionSort</span><span class=\"params\">(arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minIndex, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        minIndex = i; <span class=\"comment\">//记录未排序的第一个数，方便后面最小的数与其交换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class=\"comment\">// 寻找最小的数</span></span><br><span class=\"line\">                minIndex = j;                 <span class=\"comment\">// 将最小数的索引保存</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp; <span class=\"comment\">//将 i 和最小的数交换 ，然后 i 往后移一位，前面是已经排好的序列</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3、插入排序\"><a href=\"#3、插入排序\" class=\"headerlink\" title=\"3、插入排序\"></a>3、插入排序</h4><p>~注：描述—&gt; </p>\n<ul>\n<li>第一个元素已经排序</li>\n<li>取出下一个元素，在已经排序的元素序列中<mark>从后往前</mark>扫描</li>\n<li>如果该元素(已排序)大于新元素，将<mark>该元素移至下一个位置</mark></li>\n<li>重复3，直到找到<mark>已排序的元素小于或等于新元素</mark>的位置</li>\n</ul>\n<img src=\"/2021/05/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/aoKNFS.gif\" alt=\"aoKNFS.gif\" border=\"0\">\n\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">insertionSort</span><span class=\"params\">(arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preIndex, current;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        preIndex = i -<span class=\"number\">1</span>; </span><br><span class=\"line\">        current = arr[i];  <span class=\"comment\">//前面的数都是已经排好序的 </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (preIndex &gt;= <span class=\"number\">0</span> &amp;&amp;  arr[preIndex] &gt; current) &#123; <span class=\"comment\">//后面的数比前面的大就循环，如果小于或等于就停止循环，进行插入</span></span><br><span class=\"line\">            arr[preIndex + <span class=\"number\">1</span>] = arr[preIndex]; <span class=\"comment\">//往后挪位置</span></span><br><span class=\"line\">            preIndex--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current;  <span class=\"comment\">//上面arr[preIndex]往后移了，此时arr[preIndex]为无用值，又减了一，所以要加1；</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//注释1：从下标为1的元素开始遍历，记作temp--&gt;然后从temp向前遍历将元素往后挪位，直到不满足条件插入此元素</span></span><br></pre></td></tr></table></figure>\n\n<p>c++模板类写法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T a[],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">\tT temp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">int</span> j=i;</span><br><span class=\"line\"> \tT temp = a[i];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span> &amp;&amp; temp&lt;a[j<span class=\"number\">-1</span>])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[j]=a[j<span class=\"number\">-1</span>]; <span class=\"comment\">//这里j值并没有改变，下面减去一才是要填充的位置</span></span><br><span class=\"line\">\t\tj--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[j]=temp; <span class=\"comment\">//a[j-1]被移动到后面的序列去了， j-1是无用数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">9</span> <span class=\"number\">8</span> <span class=\"number\">7</span> temp = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">9</span> <span class=\"number\">8</span> <span class=\"number\">7</span> temp = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">9</span> <span class=\"number\">8</span> <span class=\"number\">7</span> temp = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"comment\">//注释2：从下标为1开始循环(因为要j-1不能越界)，如果前面的元素比temp(循环选定元素)大，说明要后退一位，以便留一个位置给temp，就这样一直后移直到找到一个数 &lt; temp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、计数排序\"><a href=\"#4、计数排序\" class=\"headerlink\" title=\"4、计数排序\"></a>4、计数排序</h4><p><strong>适用于在较小范围内的数字；</strong></p>\n<ul>\n<li>计数排序可以不用进行比较两数大小的操作</li>\n<li>另外用一个数组记录出现数字的次数，<mark>下标表示数字，数组下标对应的元素表示该数字出现的次数</mark></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">countSort</span><span class=\"params\">(vector&lt;<span class=\"keyword\">int</span>&gt;&amp; array)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> max = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;array.<span class=\"built_in\">size</span>();i++)&#123;<span class=\"comment\">// 找出最大值</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(array[i]&gt;max)&#123;</span><br><span class=\"line\">           max = array[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">countArray</span><span class=\"params\">(max+<span class=\"number\">1</span>)</span></span>; <span class=\"comment\">// 容量为max+1 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;array.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        countArray[array[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;<span class=\"comment\">// countArray下标代表数字，对应的元素值表示</span></span><br><span class=\"line\">    <span class=\"comment\">//出现的次数</span></span><br><span class=\"line\">    ================================</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;countArray.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;countArray[i];j++)&#123;</span><br><span class=\"line\">            array[index++] = i;</span><br><span class=\"line\">            <span class=\"comment\">// 直接修改原数组(参数)</span></span><br><span class=\"line\">            ================================</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">main</span>()&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; a=&#123;<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">countSort</span>(a);</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(vector&lt;<span class=\"keyword\">int</span>&gt;:: iterator it = a.<span class=\"built_in\">begin</span>();it!=a.<span class=\"built_in\">end</span>();it++ )&#123;</span><br><span class=\"line\">       cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、快速排序\"><a href=\"#5、快速排序\" class=\"headerlink\" title=\"5、快速排序\"></a>5、快速排序</h4><ul>\n<li>基准元素</li>\n<li>两边向中间循环查找</li>\n</ul>\n<p><mark>双边循环</mark></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sawp</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp;b)</span><span class=\"comment\">// 交换两个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    temp = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right,vector&lt;<span class=\"keyword\">int</span>&gt; &amp; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &gt;= right)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j,base;</span><br><span class=\"line\">    i = left, j =right;</span><br><span class=\"line\">    base = a[left];<span class=\"comment\">// 基准元素</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(a[j]&gt;=base &amp;&amp; i &lt; j) <span class=\"comment\">//i &lt;j 基本条件</span></span><br><span class=\"line\">        j--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(a[i]&lt;=base &amp;&amp; i &lt; j)</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j) <span class=\"comment\">// 有可能此时i==j</span></span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(a[i],a[j]); <span class=\"comment\">//交换左边和右边的值，一个大于基准值，一个小于基准值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[left] = a[i];</span><br><span class=\"line\">    a[i] = base;</span><br><span class=\"line\">    <span class=\"built_in\">quickSort</span>(left,i<span class=\"number\">-1</span>,a);<span class=\"comment\">//对剩余的部分进行快速排序</span></span><br><span class=\"line\">    <span class=\"built_in\">quickSort</span>(i+<span class=\"number\">1</span>,right,a);<span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><mark>y总模板</mark></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1000010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> q[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> q[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = l - <span class=\"number\">1</span>, j = r + <span class=\"number\">1</span>, x = q[l + r &gt;&gt; <span class=\"number\">1</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i ++ ; <span class=\"keyword\">while</span> (q[i] &lt; x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j -- ; <span class=\"keyword\">while</span> (q[j] &gt; x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; j) <span class=\"built_in\">swap</span>(q[i], q[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q, l, j);</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q, j + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ ) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ ) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, q[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><mark>单边循环</mark>&gt;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sawp</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; <span class=\"comment\">// 交换两个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">\ttemp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(vector&lt;<span class=\"keyword\">int</span>&gt; &amp;a, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L&gt;=R)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>; <span class=\"comment\">// 递归结束条件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// L,R表示起始和终点下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p = a[L];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mark = L;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = L + <span class=\"number\">1</span>; i &lt;= R; i++) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] &lt; p) &#123;</span><br><span class=\"line\">            cout&lt;&lt;p&lt;&lt;<span class=\"string\">&quot;  &gt;  &quot;</span>&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;mark值为&quot;</span>&lt;&lt;mark&lt;&lt;endl;</span><br><span class=\"line\">\t\t\tmark++;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;mark值为&quot;</span>&lt;&lt;mark&lt;&lt;endl;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(a[mark], a[i]); <span class=\"comment\">//此时mark表示a[mark]&gt;p,把小的</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 提到前面来</span></span><br><span class=\"line\">          </span><br><span class=\"line\">   </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(a[mark], a[L]);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">quickSort</span>(a, L, mark - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">quickSort</span>(a, mark + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"keyword\">int</span>&gt; a = &#123;<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">quickSort</span>(a, <span class=\"number\">0</span>, a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-归并排序\"><a href=\"#6-归并排序\" class=\"headerlink\" title=\"6.归并排序\"></a>6.归并排序</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 归并排序</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N]; <span class=\"comment\">// 数据数组和排序数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> L1, <span class=\"keyword\">int</span> R1, <span class=\"keyword\">int</span> L2, <span class=\"keyword\">int</span> R2)</span> <span class=\"comment\">// 表示两个数组左右端点下标</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = L1, j = L2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp[N];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= R1 &amp;&amp; j &lt;= R2) <span class=\"comment\">// 循环完后可能有其中一个数组还没选完</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] &lt;= a[j])    temp[index++] = a[i++];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] &gt;= a[j])    temp[index++] = a[j++]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 把剩下的数填进数组后面</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= R1)  temp[index++] = a[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= R2)  temp[index++] = a[j++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;k &lt; index;k++)</span><br><span class=\"line\">    a[L1 + k] = temp[k]; <span class=\"comment\">// 把temp数组赋给原数组对应的位置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergesort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span> <span class=\"comment\">// 左端点下标和右端点下标</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &lt; right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">mergesort</span>(a, left, mid);</span><br><span class=\"line\">    <span class=\"built_in\">mergesort</span>(a, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(A, left, mid, mid + <span class=\"number\">1</span>, right); <span class=\"comment\">// 合并两个序列并排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"built_in\">mergesort</span>(a, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["算法","排序"]},{"title":"大整数类","url":"/2021/05/20/%E5%A4%A7%E6%95%B4%E6%95%B0%E7%B1%BB/","content":"<h2 id=\"大整数模拟四则运算\"><a href=\"#大整数模拟四则运算\" class=\"headerlink\" title=\"大整数模拟四则运算\"></a>大整数模拟四则运算</h2><p>用结构体模拟大整数(很长很多位的数字)四则运算<span id=\"more\"></span></p>\n<h3 id=\"数组存储\"><a href=\"#数组存储\" class=\"headerlink\" title=\"数组存储\"></a>数组存储</h3><table><tr><td bgcolor=\"#54FF9F\">整数高位存储在数组高位，整数的低位存储在数组的低位</td></tr></table>\n\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bign</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len; <span class=\"comment\">// 记录长度</span></span><br><span class=\"line\">    <span class=\"built_in\">bign</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span> d);</span><br><span class=\"line\">        len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>输入大整数时，都是字符串读入，再把字符串另存至 <code>bign 结构体</code>，倒序存储</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">bign <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">char</span> str[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    bign a;</span><br><span class=\"line\">    a.len = <span class=\"built_in\">strlen</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.len;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a.d[i] = str[len-i<span class=\"number\">-1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"比较整数大小\"><a href=\"#比较整数大小\" class=\"headerlink\" title=\" 比较整数大小\"></a><mark> 比较整数大小</mark></h3><ul>\n<li>比较长度</li>\n<li>如果长度相等，则从高位至低位依次比较，直到出现某一位不等，就可以找出大小。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(bign a,bign b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.len &gt; b.len)\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// a大</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.len &lt; b.len) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = a.len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a.d[i] &gt; b.d[i])\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.d[i] &lt; b.d[i])\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// 相等</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"大整数四则运算\"><a href=\"#大整数四则运算\" class=\"headerlink\" title=\"大整数四则运算\"></a>大整数四则运算</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">bign <span class=\"title\">add</span><span class=\"params\">(bign a,bign b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    bign c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>; <span class=\"comment\">// 进位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.len || i &lt; b.len;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = a.d[i] + b.d[i] + carry;</span><br><span class=\"line\">        c.d[c.len++] = tmp % <span class=\"number\">10</span>;</span><br><span class=\"line\">        carry = tmp / <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(carry != <span class=\"number\">0</span>) <span class=\"comment\">// 最后还剩了进位直接赋给高位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.d[c.len++] = carry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><mark>总代码加法</mark></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大整数高精度算法c++写法</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bign</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d[<span class=\"number\">1000</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len;</span><br><span class=\"line\">\t<span class=\"built_in\">bign</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> d);</span><br><span class=\"line\">\t\tlen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">bign <span class=\"title\">change</span><span class=\"params\">(string str)</span> </span>&#123;</span><br><span class=\"line\">\tbign a;</span><br><span class=\"line\">\ta.len = str.<span class=\"built_in\">length</span>(); <span class=\"comment\">// 数字长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.len; i++) &#123;</span><br><span class=\"line\">\t\ta.d[i] = str[a.len - i - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">bign <span class=\"title\">add</span><span class=\"params\">(bign a, bign b)</span> </span>&#123;</span><br><span class=\"line\">\tbign c;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>; <span class=\"comment\">// 进位</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.len || i &lt; b.len; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tmp = a.d[i] + b.d[i] + carry;</span><br><span class=\"line\">\t\tc.d[c.len++] = tmp % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tcarry = tmp / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (carry != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tc.d[c.len++] = carry;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstring s1, s2;</span><br><span class=\"line\">\tcin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class=\"line\">\tbign a = <span class=\"built_in\">change</span>(s1);</span><br><span class=\"line\">\tbign b = <span class=\"built_in\">change</span>(s2);</span><br><span class=\"line\">\tbign res = <span class=\"built_in\">add</span>(a, b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;结果是&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = res.len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcout &lt;&lt; res.d[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"高精度减法-大数减去小数\"><a href=\"#高精度减法-大数减去小数\" class=\"headerlink\" title=\"高精度减法(大数减去小数)\"></a>高精度减法(大数减去小数)</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">bign <span class=\"title\">sub</span><span class=\"params\">(bign a,bign b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    bign c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; a.len || i &lt; b.len;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.d[i] &lt; b.d[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a.d[i+<span class=\"number\">1</span>] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            a.d[i] += <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c.d[c.len++] = a.d[i] - b.d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c.len - <span class=\"number\">1</span> &gt;= <span class=\"number\">1</span> &amp;&amp; c.d[c.len<span class=\"number\">-1</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.len--; <span class=\"comment\">// 去掉前面的0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"高精度乘法\"><a href=\"#高精度乘法\" class=\"headerlink\" title=\"高精度乘法\"></a>高精度乘法</h3><p>​     1   4  7</p>\n<p>x        3   5</p>\n<p>​    2    4   5</p>\n<p>1  4    0</p>\n<p>3   5</p>\n<p>把147看作bign类型，35看作 int 类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">bign <span class=\"title\">multi</span><span class=\"params\">(bign a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    bign c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; a.len;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = a.d[i] * b + carry;</span><br><span class=\"line\">        c.d[c.len++] = t % <span class=\"number\">10</span>; <span class=\"comment\">// 个位作为该位结果</span></span><br><span class=\"line\">        carry = t / <span class=\"number\">10</span>; <span class=\"comment\">// 高位部分作为新的进位 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(carry != <span class=\"number\">0</span>) <span class=\"comment\">// 乘法可能不止一位进位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.d[c.len++] =  carry % <span class=\"number\">10</span>;</span><br><span class=\"line\">        carry /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["算法"],"tags":["算法","模拟"]},{"title":"数组模拟数据结构","url":"/2021/05/21/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","content":"<p>我们可以用数组模拟数据结构，自定义一些函数和变量表示地址和value，而免去了过多的数据结构的定义，特别是指针的麻烦。</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"1-模拟散列表\"><a href=\"#1-模拟散列表\" class=\"headerlink\" title=\"1.模拟散列表\"></a>1.模拟散列表</h2><p>把一个较大范围内的数转化为较小范围的数的集合。</p>\n<p>模上一个数<mark>(x%N+N)%N</mark>防止下标出现负数</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>用一个数组表示要插入的槽，如果哈希产生了冲突，则把数插入到槽中(单链表)。</p>\n<p><mark>数组+模拟链表</mark></p>\n<h4 id=\"拉链法\"><a href=\"#拉链法\" class=\"headerlink\" title=\"拉链法\"></a>拉链法</h4><p>实现代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100003</span>; <span class=\"comment\">// 最好选质数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> h[N],e[N],ne[N],idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把某个数插入到槽内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = (x%N+N) % N; <span class=\"comment\">// 求槽的下标</span></span><br><span class=\"line\">    e[idx] = x; <span class=\"comment\">// e数组是存取插入所有数的数据</span></span><br><span class=\"line\">    ne[idx] = h[k]; <span class=\"comment\">// 开始终点为-1，指向上一个结点,记录单链表</span></span><br><span class=\"line\">    <span class=\"comment\">// 的上一个结点</span></span><br><span class=\"line\">    h[k] = idx++; <span class=\"comment\">// 结点递增</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 散列表查询</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到所在的槽</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = (x%N+N)%N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> = h[k];i != <span class=\"number\">-1</span>;i=ne[i])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e[i] == x)\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先把每个槽都置为-1，因为没有上个结点存在</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(h,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span> h);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"开放寻址法\"><a href=\"#开放寻址法\" class=\"headerlink\" title=\"开放寻址法\"></a>开放寻址法</h4><p>在一个数组中存数，如果当前位置没有人，则可以插入；否则一直向后查找，直到找到一个空位进行插入。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200003</span>, nul = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"comment\">// N 应该为数据总数的整数倍数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> h[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> <span class=\"comment\">// 查找和插入通用的函数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = (x%N+N)%N;<span class=\"comment\">// 先锁定下标,再找空位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h[k] != nul &amp;&amp; h[k]!=x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==N) k = <span class=\"number\">0</span>; <span class=\"comment\">// 到尾了，返回头部进行插入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(h,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span> h);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    cin &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"built_in\">find</span>(x);</span><br><span class=\"line\">    <span class=\"comment\">// 插入</span></span><br><span class=\"line\">    h[k] = x; <span class=\"comment\">// 找到可以插入的空位</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 查询</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(h[k] != nul)\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;存在该数字&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前的位置为空位，说明之前这个数字并没有进行插入，所以没有出现过</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"2-模拟链表\"><a href=\"#2-模拟链表\" class=\"headerlink\" title=\"2.模拟链表\"></a>2.模拟链表</h2><img src=\"/2021/05/21/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4b8cab21976a38b1.png\" style=\"zoom: 67%;\">\n\n\n\n<p>e数组表示当前位置的数值；ne数组表示<mark>当前位置下一个节点的位置</mark></p>\n<p><a href=\"https://www.acwing.com/file_system/file/content/whole/index/content/2572/\"> 该题目详细题解</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> idx, a[N], ae[N]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> head;</span><br><span class=\"line\"><span class=\"comment\">// idx 表示当前还未填入的数，可以表示第几个插入的顺序，不过从0开始</span></span><br><span class=\"line\"><span class=\"comment\">// a[i]表示第 i + 1 次插入的数值,ae[i] 表示当前元素的下一个元素在 a 数组中的下标idx</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_to_head</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[idx] = x;</span><br><span class=\"line\">    ae[idx] = head;</span><br><span class=\"line\">    head = idx;</span><br><span class=\"line\">    idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> x)</span> <span class=\"comment\">// 在第k个插入的数后插入x</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a[idx] = x;</span><br><span class=\"line\">    ae[idx] = ae[k];</span><br><span class=\"line\">    ae[k] = idx;</span><br><span class=\"line\">    idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delt</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> <span class=\"comment\">// k是第k个插入的数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ae[k] = ae[ae[k]]; <span class=\"comment\">// 指向把第k个数指向下下个下标位置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    idx = <span class=\"number\">0</span>, head = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> op;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k, x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"string\">&#x27;H&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">            <span class=\"built_in\">add_to_head</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"string\">&#x27;D&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            cin &gt;&gt; k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!k)  head = ae[head]; <span class=\"comment\">// k为0时删除头节点,head原来指向的第一个节点下标，那么head的值就是第一个节点的下标</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以ne[head]是第二个节点的下标</span></span><br><span class=\"line\">             <span class=\"built_in\">delt</span>(k<span class=\"number\">-1</span>); <span class=\"comment\">// 第k个插入的数下标为 k - 1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"string\">&#x27;I&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k, x;</span><br><span class=\"line\">            cin&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(k<span class=\"number\">-1</span>,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head;i!=<span class=\"number\">-1</span>;i=ae[i])</span><br><span class=\"line\">      cout&lt;&lt;a[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-邻接表模拟图\"><a href=\"#3-邻接表模拟图\" class=\"headerlink\" title=\"3.邻接表模拟图\"></a>3.邻接表模拟图</h2><ul>\n<li>用数组邻接表模拟无向图</li>\n</ul>\n<p><a href=\"https://www.acwing.com/blog/content/4663/%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90%E7%82%B9%E6%AD%A4%E9%93%BE%E6%8E%A5\">https://www.acwing.com/blog/content/4663/详细分析点此链接</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> h[N] <span class=\"comment\">// 下标为结点的编号</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> e[M], w[M], nxt[M]; <span class=\"comment\">// e,w,nxt数组下标为边的编号</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> idx; <span class=\"comment\">// idx为边的编号</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><mark>图片解析</mark></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>, M = <span class=\"number\">1010</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> h[N],e[M],nxt[M],idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> weight)</span> <span class=\"comment\">// 起点、终点、权重</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx] = b; <span class=\"comment\">// 记录终点</span></span><br><span class=\"line\">    w[idx] = weight; <span class=\"comment\">// 记录权重</span></span><br><span class=\"line\">    nxt[idx] = h[a]; <span class=\"comment\">// 与该条边邻接的边(以a为起点的边)的编号</span></span><br><span class=\"line\">    h[a] = idx; <span class=\"comment\">// 以a为起点对应的上一条边的编号,更行h[a],方便下一条边记录数据</span></span><br><span class=\"line\">    idx++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     e[eidx] = v;        // 记录边的终点</span></span><br><span class=\"line\"><span class=\"comment\">    w[eidx] = weight;   // 记录边的权重</span></span><br><span class=\"line\"><span class=\"comment\">    nxt[eidx] = h[u];   // 将下一条边指向结点u此时的第一条边</span></span><br><span class=\"line\"><span class=\"comment\">    h[u] = eidx;        // 将结点u的第一条边的编号改为此时的eidx</span></span><br><span class=\"line\"><span class=\"comment\">    eidx++;             // 递增边的编号edix, 为将来使用</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历结点u的所有相邻的边</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">iterate</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> eid = h[u];eid != <span class=\"number\">-1</span>;eid = nxt[eid])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = e[eid];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> weight = w[eid];</span><br><span class=\"line\">        cout &lt;&lt; u &lt;&lt; <span class=\"string\">&quot;-&gt;&quot;</span> &lt;&lt; v &lt;&lt; <span class=\"string\">&quot;,weight:&quot;</span> &lt;&lt; we</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(h,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span> h);</span><br><span class=\"line\">    idx = <span class=\"number\">0</span>; <span class=\"comment\">// 编号从0开始</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v, weight;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; weight;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(u,v,weight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u = <span class=\"number\">1</span>; u &lt;= n;u++)</span><br><span class=\"line\">        <span class=\"built_in\">iterate</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在有向图中， <code>1-&gt;2</code>和<code>1-&gt;3</code>表示的才是领边，才会被nxt数组记录；</p>\n<p>又如<code>2-&gt;4</code>和<code>3-&gt;4</code>之间 2 和 3是不相通的，所以nxt数组值为 -1，表示没有邻接边</p>\n<ul>\n<li>模拟有向图</li>\n</ul>\n<p>如果要模拟无向图那么只要双向的边都看作不同的两条边添加就行了，比如</p>\n<p>add(a,b)   and     add(b,a)即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1000010</span>, M = N * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> h[N], e[N], ne[M], w[N], idx; <span class=\"comment\">// 注意w表示结点的评分，而不是边的权值</span></span><br><span class=\"line\">LL f[N]; <span class=\"comment\">// 状态数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx] = b;</span><br><span class=\"line\">    ne[idx] = h[a];</span><br><span class=\"line\">    h[a] = idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa)</span> <span class=\"comment\">// 记录父节点防止又回头往上搜,u 表示的是结点编号从 1 - n</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    f[u] = w[u]; <span class=\"comment\">// 记录点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = h[u];i != <span class=\"number\">-1</span>;i = ne[i]) <span class=\"comment\">// h[u]表示的是 u 为起点的边的编号，再用ne[i]找到上一个以 u 为起点的编号，直到找到所有</span></span><br><span class=\"line\">    <span class=\"comment\">// 在其之前加入的领边</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = e[i]; <span class=\"comment\">// 记录的是终点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j != fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(j,u); <span class=\"comment\">// 此时的父节点是u</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n; </span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(h,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span> h);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)   <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 边数 = 点数 - 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n - <span class=\"number\">1</span>; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a, &amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b), <span class=\"built_in\">add</span>(b,a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">-1</span>); <span class=\"comment\">// 从上面的1结点开始向下搜</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><mark>注意事项</mark></p>\n<p>  1.无向图与有向图<code>e, ne, w</code>数组的数组大小<br>(1). 无向图<br><code>h[N], e[M * 2], ne[M * 2], w[M * 2], idx</code>;</p>\n<p>(2). 有向图<br><code>h[N], e[M], ne[M], w[M], idx</code>;</p>\n<h3 id=\"邻接表图的遍历\"><a href=\"#邻接表图的遍历\" class=\"headerlink\" title=\"邻接表图的遍历\"></a>邻接表图的遍历</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>, M = N * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> h[N], e[M], ne[M], idx;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加一条边a-&gt;b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\te[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dfs遍历邻接点函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, u);</span><br><span class=\"line\">\tst[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h[u]; i != <span class=\"number\">-1</span>; i = ne[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = e[i];</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, j);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// dfs遍历所有点的函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">\tst[u] = <span class=\"literal\">true</span>; <span class=\"comment\">// st[u] 表示点u已经被遍历过</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h[u]; i != <span class=\"number\">-1</span>; i = ne[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = e[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!st[j]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, j);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">dfs</span>(j); <span class=\"comment\">// 继续递归</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(h, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> h);</span><br><span class=\"line\">\tcin &gt;&gt; n; <span class=\"comment\">// 设有n个点  1- n</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123; <span class=\"comment\">// n - 1条边</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(a, b), <span class=\"built_in\">add</span>(b, a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgtu.com/i/c3bKje\"><img src=\"/2021/05/21/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/c3bKje.md.png\" alt=\"c3bKje.png\" border=\"0\"></a><br>可以看到输入 6 条边(7个点)的图，从1开始遍历它只会输出1的领边的终点，<mark>ne[idx] = h[a]</mark>,记录的是以a为起点的边的编号，</p>\n<p>2&lt;—&gt;6 和 7&lt;—&gt;2并没有以1为起点，或1的领边的终点没有交集，所以不会遍历到下面的边。</p>\n<p><a href=\"https://imgtu.com/i/c3b0Bj\"><img src=\"/2021/05/21/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/c3b0Bj.png\" alt=\"c3b0Bj.png\" border=\"0\"></a><br>后加入的线路先输出，但是先输出的最相邻的，因为要先遍历邻边的终点k，再以k为起点遍历下一层的边</p>\n<h2 id=\"4-模拟队列\"><a href=\"#4-模拟队列\" class=\"headerlink\" title=\"4.模拟队列\"></a>4.模拟队列</h2><p>我们可以不采用<code>queue</code>来模拟队列完成<code>bfs</code>操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> hh = <span class=\"number\">0</span>; <span class=\"comment\">// 队头</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> tt = <span class=\"number\">-1</span>; <span class=\"comment\">// 队尾</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> q[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当 hh &lt;= tt 时，表示队列中有元素</span></span><br><span class=\"line\">hh.....tt</span><br><span class=\"line\">队头\t  队尾</span><br><span class=\"line\"><span class=\"comment\">// 队尾插入元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    q[++tt] = x; <span class=\"comment\">// 插入的第一个元素为q[0]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队头删除元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> \thh++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hh &gt; tt)\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取出队头元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> q[hh];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-单调队列\"><a href=\"#5-单调队列\" class=\"headerlink\" title=\"5.单调队列\"></a>5.单调队列</h2><p>单调队列是维护一个单调递增或递减的队列</p>\n<p>入队和出队操作满足以下两点：</p>\n<p>1、入队：对于一个点而言，如果加入队列后满足队列的单调性质，就可以入队</p>\n<p>2、出队：对于一个点而言,如果说新加入的点,比它更加具有潜力,潜力一般指(拓展性更强,生存能力更高,节点入队时间短</p>\n<p>单调队列适用于那些范围</p>\n<p>单调队列,其实是单调栈的一个升级plus版本,或者说是具有[l,r]区间性质的单调栈.(注:单调栈一般来说是[0,r]类型的)</p>\n<p>单调队列算法步骤<br>对于一个数而言,它可以从队尾入队,必须满足题目的特定条件<br>对于一个队头的数而言,如果说新来的数,不仅是新来的具有潜力,而且又自身价值还比它价值高,那么不用说队头出队.<br>总而言之,队列的单调条件,性质如何设置,是我们解题的关键.</p>\n<p>**<em>*</em>*单调队列的****核心****（我认为的哈）：<mark>得到当前的某个范围内的最小值或最大值</mark></p>\n<hr>\n<p><mark>题目</mark></p>\n<p>题目描述<br>有一个序列a[1],a[2],……,a[n],求其中长度&lt;=m的最大连续子序列和.</p>\n<p>题解：可以使用前缀和来求解，<code>a[i]+a[i+1]+...+a[j]</code>可以表示为<code>s[j]- s[i-1]</code></p>\n<p>我们可以枚举每 m 段数据的右端点，并在左边<code>1&lt;= i-j &lt;= m</code>维护左端点，即找出最小的<code>s[j]</code>，使得队头的元素永远是最小值。每次只要取队头的<code>ql</code>就是当前队列的最小值</p>\n<p>用<code>q数组</code>保存<mark>前缀和数组的下标</mark></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">3e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,q[N],ql,qr;</span><br><span class=\"line\">ll s[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">        cin&gt;&gt;s[i];</span><br><span class=\"line\">        s[i]+=s[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll res=INT_MIN;</span><br><span class=\"line\">    <span class=\"comment\">// q数组存储下标</span></span><br><span class=\"line\">    ql=qr=<span class=\"number\">1</span>; <span class=\"comment\">// 先把0入队表示s[0]，那么 ql = 1</span></span><br><span class=\"line\">    q[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;<span class=\"comment\">//初始决策</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ql&lt;=qr&amp;&amp;i-q[ql]&gt;m) ql++; <span class=\"comment\">// 限定范围，超过范围则前面的数要出队</span></span><br><span class=\"line\">        res=<span class=\"built_in\">max</span>(res,s[i]-s[q[ql]]);</span><br><span class=\"line\">        <span class=\"comment\">// 更新队头，要保持单调的性质</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ql&lt;=qr&amp;&amp;s[q[qr]]&gt;=s[i]) qr--; <span class=\"comment\">// 新加入的数比前面的小，那么前面的数要出队空出位置给新加入的数</span></span><br><span class=\"line\">        qr++;</span><br><span class=\"line\">        q[qr]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详情也可看这篇文章：</p>\n<p><a href=\"https://blog.csdn.net/LJD201724114126/article/details/80663855\">https://blog.csdn.net/LJD201724114126/article/details/80663855</a></p>\n","categories":["算法"],"tags":["模拟","数据结构"]},{"title":"背包汇总","url":"/2021/05/20/%E8%83%8C%E5%8C%85%E6%B1%87%E6%80%BB/","content":"<hr>\n<h2 id=\"categories-学习\"><a href=\"#categories-学习\" class=\"headerlink\" title=\"categories: 学习\"></a>categories: 学习</h2><h1 id=\"背包问题汇总\"><a href=\"#背包问题汇总\" class=\"headerlink\" title=\"背包问题汇总\"></a>背包问题汇总</h1><h3 id=\"01背包问题-easy\"><a href=\"#01背包问题-easy\" class=\"headerlink\" title=\"01背包问题(easy)\"></a>01背包问题(easy)</h3> <span id=\"more\"></span>\n\n<p>有 N 件物品和一个容量是 V 的背包。<mark>每件物品只能使用一次</mark>。</p>\n<p>第 i 件物品的体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p>\n<p>输入格式</p>\n<p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p>\n<p>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 ii 件物品的体积和价值。</p>\n<p>输出格式</p>\n<p>输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>0&lt;N,V≤10000&lt;N,V≤1000<br>0&lt;vi, wi ≤10000&lt;vi, wi≤1000</p>\n<p>输入样例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">4 5</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 4</span><br><span class=\"line\">3 4</span><br><span class=\"line\">4 5</span><br></pre></td></tr></table></figure>\n\n<p>输出样例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n\n<p> 用集合和状态DP分析:</p>\n<p><img src=\"/2021/05/20/%E8%83%8C%E5%8C%85%E6%B1%87%E6%80%BB/d1.png\" alt=\"d1\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N]; <span class=\"comment\">// 体积和价值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N][N]; <span class=\"comment\">// f[i][j], j体积下前i个物品的最大价值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m; <span class=\"comment\">// n件物品和背包容量m</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\tcin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123; <span class=\"comment\">// 此背包有选与不选两种情况</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; v[i]) &#123; <span class=\"comment\">// 如果背包容量比这件物品的体积还小</span></span><br><span class=\"line\">\t\t\t\tf[i][j] = f[i - <span class=\"number\">1</span>][j]; <span class=\"comment\">// 那么此时这个物品就不用管</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\tcout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; j &lt;&lt; &#x27; &#x27; &lt;&lt; f[i][j] &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tf[i][j] = <span class=\"built_in\">max</span>(f[i - <span class=\"number\">1</span>][j - v[i]] + w[i], f[i - <span class=\"number\">1</span>][j]); <span class=\"comment\">// 状态转移方程,有两种情况取或者不取</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tcout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; j &lt;&lt; &#x27; &#x27; &lt;&lt; f[i][j] &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// f[i][j] 表示 体积为j下前i个物品的价值最大值</span></span><br><span class=\"line\">\tcout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// f[i-1][j] 可以看作是上一次循环计算的结果，因为只用到了一次，可以直接变为一维数组优化空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 优化版本</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)</span><br><span class=\"line\">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m; j &gt;= v[i];j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                f[j] = <span class=\"built_in\">max</span>(f[j - v[i]] + w[i],f[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout &lt;&lt; f[m]&lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><mark>优化分析</mark><br>看上面的输出数据, 我们会发现其实二维表里有很多重复的. 这是因为, 从递归式的特点来看, 我们只是基于第i-1层对第i层做了更新, 而第i-1层该是什么样还是什么样.</p>\n<p>换言之, 我们只需要知道最后一层的情况, 而不需要存储之前的结果.</p>\n<p>看上面的表格, 其实我们最后输出的是最右下角的值.</p>\n<p>我们这个时候可以得到一个递归式</p>\n<p> f[v]=max{f[v], f[v-vi]+wi}</p>\n<p>理解起来, 是和上面讲的一样的.<br>但是, 在具体的实现层面上, 有一个很反直觉的点:</p>\n<p>不同于二维dp的双重循环, 空间优化版本的内层循环必须是逆序的.</p>\n<p>如果这一点理解了, 整个程序的实现就非常容易了.</p>\n<p><mark>为什么优化要逆序</mark></p>\n<p>因为我们采用的是一维数组，每次都是更新此数组的每个数，我们要取得是最后一个数，因为 <code>f[j]</code> 要看数组前面的下标 <code>j-v[i]</code>，假设我们体积 j 从0开始遍历，设此时遍历到10，数组前面的数都已经在这一层更新过了，那就会出现错误了，应该让后面的下标最先遍历，后面下标遍历了一遍就用不到了。</p>\n<hr>\n<h3 id=\"完全背包问题\"><a href=\"#完全背包问题\" class=\"headerlink\" title=\"完全背包问题\"></a>完全背包问题</h3><p>有 N 种物品和一个容量是 V 的背包，每种物品都有==无限件==可用。</p>\n<p>第 i 种物品的体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p>\n<p>输入格式</p>\n<p>第一行两个整数，N，VN，V，用空格隔开，分别表示物品种数和背包容积。</p>\n<p>接下来有 N 行，每行两个整数 vi,wivi,wi，用空格隔开，分别表示第 i种物品的体积和价值。</p>\n<p>输出格式</p>\n<p>输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>0&lt;N,V≤10000&lt;N,V≤1000<br>0&lt;vi,wi≤10000&lt;vi,wi≤1000</p>\n<p>输入样例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">4 5</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 4</span><br><span class=\"line\">3 4</span><br><span class=\"line\">4 5</span><br></pre></td></tr></table></figure>\n\n<p>输出样例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/2021/05/20/%E8%83%8C%E5%8C%85%E6%B1%87%E6%80%BB/d2.png\" alt=\"d2\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N][N]; <span class=\"comment\">// f[i][j]表示从前i个物品中选且 V &lt;= j 最大价值，每件物品可重复选取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m; <span class=\"comment\">// 物品总数和背包容积</span></span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)  cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[i][j] = f[i - <span class=\"number\">1</span>][j]; <span class=\"comment\">// 第i件物品一件也不取</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j &gt;= v[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[i][j] = <span class=\"built_in\">max</span>(f[i<span class=\"number\">-1</span>][j], f[i][j - v[i]] + w[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout &lt;&lt; f[n][m];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://www.acwing.com/video/945/\">代码优化</a>变为==一维数组==</p>\n<p>优化写法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N]; <span class=\"comment\">// f[i][j]表示从前i个物品中选且 V &lt;= j 最大价值，每件物品可重复选取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m; <span class=\"comment\">// 物品总数和背包容积</span></span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)  cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m; j &gt;= v[i];j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                f[j] = <span class=\"built_in\">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout &lt;&lt; f[m];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"多重背包问题-数量固定\"><a href=\"#多重背包问题-数量固定\" class=\"headerlink\" title=\"多重背包问题(数量固定)\"></a>多重背包问题(数量固定)</h3><p>有 N 种物品和一个容量是 V 的背包。</p>\n<p>第 i 种物品==最多有 s 件==，每件体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p>\n<p>输入格式</p>\n<p>第一行两个整数，N，VN，V，用空格隔开，分别表示物品种数和背包容积。</p>\n<p>接下来有 NN 行，每行三个整数 vi,wi,sivi,wi,si，用空格隔开，分别表示第 ii 种物品的体积、价值和数量。</p>\n<p>输出格式</p>\n<p>输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>0&lt;N,V≤1000&lt;N,V≤100<br>0&lt;vi,wi,si≤1000&lt;vi,wi,si≤100</p>\n<p>输入样例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">4</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>输出样例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>本题是01背包问题的一个演化，01背包问题中一个背包只有选与不选两种情况，在多重背包问题中每个背包(有s个背包)<code>s+1</code>种选取方法,只要再加1个循环循环取得数量即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N], s[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N]; <span class=\"comment\">// f[i]表示体积为i的背包可以获得的最大价值 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m; <span class=\"comment\">// 物品总数和背包容积</span></span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)  cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m; j &gt;= v[i];j--) <span class=\"comment\">// 从m开始</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= s[i] &amp;&amp;  k * v[i] &lt;= j;k++)</span><br><span class=\"line\">                f[j] = <span class=\"built_in\">max</span>(f[j], f[j - k * v[i]] + k *  w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    cout &lt;&lt; f[m];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标准朴素写法\"><a href=\"#标准朴素写法\" class=\"headerlink\" title=\"标准朴素写法\"></a>标准朴素写法</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N], w[N], s[N]; </span><br><span class=\"line\"> <span class=\"comment\">// f[i][j] 表示前i件物品总重量(且总重量 &lt;= j)的最大价格</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N][N]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= s[i]; k ++)&#123; <span class=\"comment\">// 遍历物品的数量</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j &gt;=  k * v[i])&#123;</span><br><span class=\"line\">                    f[i][j] = <span class=\"built_in\">max</span>(f[i][j], f[i - <span class=\"number\">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class=\"line\">                    <span class=\"comment\">// max 里面也包含了f[i - 1][j]，所以前面可以省</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["算法","动态规划"]}]